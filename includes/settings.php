<?php
/**
 * BootPHP Settings Helper
 * Manages application settings from database
 * Generated by installer on 2025-06-28 19:33:34
 */

class Settings {
    private static $cache = [];
    private static $loaded = false;

    /**
     * Get setting value
     */
    public static function get($key, $default = null) {
        if (!self::$loaded) {
            self::loadSettings();
        }
        
        return isset(self::$cache[$key]) ? self::$cache[$key] : $default;
    }

    /**
     * Set setting value
     */
    public static function set($key, $value, $type = 'string') {
        try {
            $pdo = getDbConnection();
            
            $stmt = $pdo->prepare("
                INSERT INTO settings (`key`, `value`, `type`, updated_at) 
                VALUES (?, ?, ?, NOW()) 
                ON DUPLICATE KEY UPDATE 
                `value` = VALUES(`value`), 
                `type` = VALUES(`type`), 
                updated_at = NOW()
            ");
            
            $stmt->execute([$key, $value, $type]);
            
            // Update cache
            self::$cache[$key] = self::castValue($value, $type);
            
            return true;
        } catch (Exception $e) {
            logError('Failed to set setting: ' . $e->getMessage(), ['key' => $key, 'value' => $value]);
            return false;
        }
    }

    /**
     * Load all settings from database
     */
    private static function loadSettings() {
        try {
            $pdo = getDbConnection();
            $stmt = $pdo->query('SELECT `key`, `value`, `type` FROM settings');
            $settings = $stmt->fetchAll();
            
            foreach ($settings as $setting) {
                self::$cache[$setting['key']] = self::castValue($setting['value'], $setting['type']);
            }
            
            self::$loaded = true;
        } catch (Exception $e) {
            logError('Failed to load settings: ' . $e->getMessage());
            self::$loaded = true; // Prevent infinite retry
        }
    }

    /**
     * Cast value to appropriate type
     */
    private static function castValue($value, $type) {
        switch ($type) {
            case 'boolean':
                return (bool)$value;
            case 'integer':
                return (int)$value;
            case 'json':
                return json_decode($value, true);
            case 'array':
                return explode(',', $value);
            default:
                return $value;
        }
    }

    /**
     * Get all settings
     */
    public static function getAll() {
        if (!self::$loaded) {
            self::loadSettings();
        }
        
        return self::$cache;
    }

    /**
     * Clear settings cache
     */
    public static function clearCache() {
        self::$cache = [];
        self::$loaded = false;
    }

    /**
     * Get settings by category
     */
    public static function getByCategory($category) {
        try {
            $pdo = getDbConnection();
            $stmt = $pdo->prepare('SELECT `key`, `value`, `type` FROM settings WHERE category = ?');
            $stmt->execute([$category]);
            $settings = $stmt->fetchAll();
            
            $result = [];
            foreach ($settings as $setting) {
                $result[$setting['key']] = self::castValue($setting['value'], $setting['type']);
            }
            
            return $result;
        } catch (Exception $e) {
            logError('Failed to get settings by category: ' . $e->getMessage(), ['category' => $category]);
            return [];
        }
    }
}

// Convenience functions
function getSetting($key, $default = null) {
    return Settings::get($key, $default);
}

function setSetting($key, $value, $type = 'string') {
    return Settings::set($key, $value, $type);
}
?>