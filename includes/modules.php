<?php
/**
 * phpStrapModules System
 * Handles module loading and hook execution
 * Generated by installer on 2025-09-10 22:15:25
 */

/** Base Module Class */
abstract class BaseModule {
    protected $name;
    protected $settings;
    protected $enabled;

    public function __construct($name, $settings = [], $enabled = false) {
        $this->name = $name;
        $this->settings = $settings;
        $this->enabled = $enabled;
    }

    public function init() {}
    protected function getSetting($key, $default = null) { return $this->settings[$key] ?? $default; }
    protected function setSetting($key, $value) {
        $this->settings[$key] = $value;
        return ModuleManager::updateModuleSetting($this->name, $key, $value);
    }
    public function isEnabled() { return $this->enabled; }
    public function getName() { return $this->name; }
}

class ModuleManager {
    private static $modules = [];
    private static $hooks = [];
    private static $loaded = false;

    public static function loadModules() {
        if (self::$loaded) return;
        try {
            $pdo = getDbConnection();
            $stmt = $pdo->query('SELECT name, title, settings, hooks, enabled FROM modules WHERE enabled = 1 ORDER BY priority ASC');
            $modules = $stmt->fetchAll();
            foreach ($modules as $module_data) self::loadModule($module_data);
            self::$loaded = true;
        } catch (Exception $e) { logError('Failed to load modules: ' . $e->getMessage()); }
    }

    private static function loadModule($module_data) {
        $name = $module_data['name'];
        $module_file = BASE_PATH . '/modules/' . $name . '/' . $name . '.php';
        if (!file_exists($module_file)) { logError('Module file not found: ' . $module_file); return false; }
        try {
            require_once $module_file;
            $class_name = ucfirst($name) . 'Module';
            if (!class_exists($class_name)) { logError('Module class not found: ' . $class_name); return false; }
            $settings = json_decode($module_data['settings'], true) ?: [];
            $module = new $class_name($name, $settings, true);
            $module->init();
            self::$modules[$name] = $module;
            $hooks = json_decode($module_data['hooks'], true) ?: [];
            foreach ($hooks as $hook_name => $hook_methods) {
                self::$hooks[$hook_name] = self::$hooks[$hook_name] ?? [];
                foreach ($hook_methods as $hook_method) {
                    self::$hooks[$hook_name][] = [
                        'module' => $module,
                        'method' => $hook_method['method'],
                        'priority' => $hook_method['priority'] ?? 10
                    ];
                }
            }
            foreach (self::$hooks as $hook_name => $hook_list) {
                usort(self::$hooks[$hook_name], fn($a, $b) => ($a['priority'] <=> $b['priority']));
            }
            return true;
        } catch (Exception $e) { logError('Failed to load module: ' . $name . ' - ' . $e->getMessage()); return false; }
    }

    public static function executeHook($hook_name, $data = null) {
        if (!self::$loaded) self::loadModules();
        if (!isset(self::$hooks[$hook_name])) return $data;
        foreach (self::$hooks[$hook_name] as $hook) {
            try {
                $module = $hook['module']; $method = $hook['method'];
                if (method_exists($module, $method)) $data = $module->$method($data);
            } catch (Exception $e) { logError('Hook execution failed: ' . $hook_name . ' - ' . $e->getMessage()); }
        }
        return $data;
    }

    public static function getModule($name) { return self::$modules[$name] ?? null; }
    public static function getModules() { return self::$modules; }

    public static function updateModuleSetting($module_name, $key, $value) {
        try {
            $pdo = getDbConnection();
            $stmt = $pdo->prepare('SELECT settings FROM modules WHERE name = ?');
            $stmt->execute([$module_name]);
            $settings_json = (string)$stmt->fetchColumn();
            $settings = json_decode($settings_json, true) ?: [];
            $settings[$key] = $value;
            $stmt = $pdo->prepare('UPDATE modules SET settings = ? WHERE name = ?');
            return $stmt->execute([json_encode($settings), $module_name]);
        } catch (Exception $e) { logError('Failed to update module setting: ' . $e->getMessage()); return false; }
    }
}

function executeHook($hook_name, $data = null) { return ModuleManager::executeHook($hook_name, $data); }
?>