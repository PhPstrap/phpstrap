<?php
/**
 * phpStrapInstaller - Configuration Generation Functions
 * Save as: installer/config.php
 *
 * Notes:
 * - BASE_URL is now baked as a literal scheme://host (no path) to avoid hosts
 *   that leak filesystem paths via SCRIPT_NAME.
 * - generateAppConfig($site_name, $base_url = null) accepts an optional base URL.
 *   If null, it infers a clean origin from the current request.
 */

/* ------------------------- Installer-side helpers ------------------------- */

/**
 * Derive a clean public origin (scheme://host) without any path.
 * Honors HTTPS and common proxy headers.
 */
function phpstrap_public_origin(): string {
    // Prefer proxy hints if present
    $proto = null;
    if (!empty($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
        // e.g. "https,http" -> take first
        $parts = explode(',', $_SERVER['HTTP_X_FORWARDED_PROTO']);
        $proto = strtolower(trim($parts[0]));
    } elseif (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') {
        $proto = 'https';
    } else {
        $proto = 'http';
    }

    // Hostname (HTTP_HOST usually includes port if non-standard)
    $host = $_SERVER['HTTP_HOST'] ?? ($_SERVER['SERVER_NAME'] ?? 'localhost');

    // Basic hardening: trim whitespace and remove trailing slashes
    $host = rtrim(trim($host));

    return $proto . '://' . $host;
}

/**
 * Normalize a provided base URL to just scheme://host (strip any path).
 */
function phpstrap_normalize_origin(string $maybe_url): string {
    $maybe_url = trim($maybe_url);
    if ($maybe_url === '') return phpstrap_public_origin();

    // If it's already just host, prepend scheme from request
    if (strpos($maybe_url, 'http://') !== 0 && strpos($maybe_url, 'https://') !== 0) {
        $scheme = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https' : 'http';
        $maybe_url = $scheme . '://' . $maybe_url;
    }

    $p = @parse_url($maybe_url);
    if (!$p || empty($p['scheme']) || empty($p['host'])) {
        return phpstrap_public_origin();
    }
    $origin = $p['scheme'] . '://' . $p['host'];
    if (!empty($p['port'])) {
        $origin .= ':' . $p['port'];
    }
    return $origin;
}

/* ----------------------- File generation functions ----------------------- */

function generateDatabaseConfig($db_config) {
    $config = "<?php\n";
    $config .= "/**\n";
    $config .= " * phpStrapDatabase Configuration\n";
    $config .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $config .= " */\n\n";
    
    $config .= "// Database configuration\n";
    $config .= "define('DB_HOST', '" . addslashes($db_config['host']) . "');\n";
    $config .= "define('DB_NAME', '" . addslashes($db_config['name']) . "');\n";
    $config .= "define('DB_USER', '" . addslashes($db_config['user']) . "');\n";
    $config .= "define('DB_PASS', '" . addslashes($db_config['pass']) . "');\n";
    $config .= "define('DB_PORT', " . (int)$db_config['port'] . ");\n";
    $config .= "define('DB_CHARSET', 'utf8mb4');\n\n";
    
    $config .= "// PDO DSN\n";
    $config .= "define('DB_DSN', 'mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_NAME . ';charset=' . DB_CHARSET);\n\n";
    
    $config .= "// PDO Options\n";
    $config .= "define('DB_OPTIONS', [\n";
    $config .= "    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n";
    $config .= "    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n";
    $config .= "    PDO::ATTR_EMULATE_PREPARES => false,\n";
    $config .= "    PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8mb4'\n";
    $config .= "]);\n\n";
    
    $config .= "// Database connection function\n";
    $config .= "function getDbConnection() {\n";
    $config .= "    static \$pdo = null;\n";
    $config .= "    if (\$pdo === null) {\n";
    $config .= "        try {\n";
    $config .= "            \$pdo = new PDO(DB_DSN, DB_USER, DB_PASS, DB_OPTIONS);\n";
    $config .= "        } catch (PDOException \$e) {\n";
    $config .= "            error_log('Database connection failed: ' . \$e->getMessage());\n";
    $config .= "            throw new Exception('Database connection failed');\n";
    $config .= "        }\n";
    $config .= "    }\n";
    $config .= "    return \$pdo;\n";
    $config .= "}\n\n";
    
    $config .= "// Test database connection\n";
    $config .= "function testDbConnection() {\n";
    $config .= "    try {\n";
    $config .= "        \$pdo = getDbConnection();\n";
    $config .= "        \$pdo->query('SELECT 1');\n";
    $config .= "        return true;\n";
    $config .= "    } catch (Exception \$e) {\n";
    $config .= "        return false;\n";
    $config .= "    }\n";
    $config .= "}\n";
    $config .= "?>";
    
    return $config;
}

/**
 * Generate app config. BASE_URL is baked as a literal, using only scheme://host.
 * You can pass $base_url (string) or leave null to auto-detect.
 */
function generateAppConfig($site_name, $base_url = null) {
    // Allow install.php to pre-set $_SESSION['base_url'], otherwise auto-detect
    if ($base_url === null && isset($_SESSION['base_url'])) {
        $base_url = $_SESSION['base_url'];
    }
    $origin = phpstrap_normalize_origin($base_url ?? phpstrap_public_origin());
    $origin = rtrim($origin, '/');

    $config = "<?php\n";
    $config .= "/**\n";
    $config .= " * phpStrapApplication Configuration\n";
    $config .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $config .= " */\n\n";
    
    // Core application settings
    $config .= "// Core Application Settings\n";
    $config .= "define('BOOTPHP_VERSION', '0.1.2');\n";
    $config .= "define('SITE_NAME', '" . addslashes($site_name) . "');\n";
    $config .= "define('BASE_PATH', dirname(__DIR__));\n";
    // IMPORTANT: pin BASE_URL to the clean origin â€” do not compute from SCRIPT_NAME
    $config .= "define('BASE_URL', '" . addslashes($origin) . "');\n";
    $config .= "define('TIMEZONE', 'UTC');\n\n";
    
    // Security settings
    $config .= "// Security Settings\n";
    $config .= "define('SECURITY_SALT', '" . generateSecuritySalt() . "');\n";
    $config .= "define('SESSION_NAME', 'bootphp_session');\n";
    $config .= "define('SESSION_LIFETIME', 3600);\n";
    $config .= "define('CSRF_TOKEN_NAME', 'bootphp_csrf_token');\n";
    $config .= "define('API_RATE_LIMIT', 1000);\n";
    $config .= "define('API_RATE_WINDOW', 3600);\n\n";
    
    // File and upload settings
    $config .= "// File and Upload Settings\n";
    $config .= "define('UPLOAD_PATH', BASE_PATH . '/uploads');\n";
    $config .= "define('UPLOAD_URL', BASE_URL . '/uploads');\n";
    $config .= "define('MAX_UPLOAD_SIZE', 10485760); // 10MB\n";
    $config .= "define('ALLOWED_EXTENSIONS', 'jpg,jpeg,png,gif,pdf,doc,docx,txt,zip');\n\n";
    
    // Cache and performance
    $config .= "// Cache and Performance\n";
    $config .= "define('CACHE_ENABLED', false);\n";
    $config .= "define('CACHE_LIFETIME', 3600);\n";
    $config .= "define('DEBUG_MODE', false);\n";
    $config .= "define('LOG_ERRORS', true);\n";
    $config .= "define('LOG_PATH', BASE_PATH . '/logs');\n\n";
    
    // Email settings
    $config .= "// Email Settings\n";
    $config .= "define('MAIL_DRIVER', 'php'); // php, smtp\n";
    $config .= "define('MAIL_FROM_ADDRESS', '');\n";
    $config .= "define('MAIL_FROM_NAME', SITE_NAME);\n\n";
    
    // Helper functions
    $config .= "// Helper Functions\n";
    // Keep API compatibility: getBaseUrl() just returns the constant
    $config .= "function getBaseUrl() { return BASE_URL; }\n\n";
    
    $config .= "function base_url(\$path = '') {\n";
    $config .= "    \$path = ltrim((string)\$path, '/');\n";
    $config .= "    return rtrim(BASE_URL, '/') . (\$path !== '' ? '/' . \$path : '');\n";
    $config .= "}\n\n";
    
    $config .= "function generateCsrfToken() {\n";
    $config .= "    if (!isset(\$_SESSION[CSRF_TOKEN_NAME])) {\n";
    $config .= "        \$_SESSION[CSRF_TOKEN_NAME] = bin2hex(random_bytes(32));\n";
    $config .= "    }\n";
    $config .= "    return \$_SESSION[CSRF_TOKEN_NAME];\n";
    $config .= "}\n\n";
    
    $config .= "function validateCsrfToken(\$token) {\n";
    $config .= "    return isset(\$_SESSION[CSRF_TOKEN_NAME]) && hash_equals(\$_SESSION[CSRF_TOKEN_NAME], \$token);\n";
    $config .= "}\n\n";
    
    $config .= "function logError(\$message, \$context = []) {\n";
    $config .= "    if (LOG_ERRORS) {\n";
    $config .= "        \$log_file = LOG_PATH . '/error_' . date('Y-m-d') . '.log';\n";
    $config .= "        \$timestamp = date('Y-m-d H:i:s');\n";
    $config .= "        \$log_entry = \"[\$timestamp] \$message\";\n";
    $config .= "        if (!empty(\$context)) {\n";
    $config .= "            \$log_entry .= ' Context: ' . json_encode(\$context);\n";
    $config .= "        }\n";
    $config .= "        \$log_entry .= PHP_EOL;\n";
    $config .= "        @file_put_contents(\$log_file, \$log_entry, FILE_APPEND | LOCK_EX);\n";
    $config .= "    }\n";
    $config .= "}\n\n";
    
    $config .= "// Initialize application\n";
    $config .= "function initializeApp() {\n";
    $config .= "    // Set timezone\n";
    $config .= "    date_default_timezone_set(TIMEZONE);\n";
    $config .= "    \n";
    $config .= "    // Configure session\n";
    $config .= "    ini_set('session.name', SESSION_NAME);\n";
    $config .= "    ini_set('session.gc_maxlifetime', (string)SESSION_LIFETIME);\n";
    $config .= "    ini_set('session.cookie_httponly', '1');\n";
    $config .= "    // Use secure cookies if HTTPS\n";
    $config .= "    ini_set('session.cookie_secure', (isset(\$_SERVER['HTTPS']) && \$_SERVER['HTTPS'] !== 'off') ? '1' : '0');\n";
    $config .= "    \n";
    $config .= "    // Start session if not already started\n";
    $config .= "    if (session_status() === PHP_SESSION_NONE) {\n";
    $config .= "        session_start();\n";
    $config .= "    }\n";
    $config .= "    \n";
    $config .= "    // Set error reporting based on debug mode\n";
    $config .= "    if (DEBUG_MODE) {\n";
    $config .= "        error_reporting(E_ALL);\n";
    $config .= "        ini_set('display_errors', '1');\n";
    $config .= "    } else {\n";
    $config .= "        error_reporting(E_ALL & ~E_NOTICE);\n";
    $config .= "        ini_set('display_errors', '0');\n";
    $config .= "    }\n";
    $config .= "}\n";
    $config .= "?>";
    
    return $config;
}

function generateSettingsHelper() {
    $helper = "<?php\n";
    $helper .= "/**\n";
    $helper .= " * phpStrapSettings Helper\n";
    $helper .= " * Manages application settings from database\n";
    $helper .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $helper .= " */\n\n";
    
    $helper .= "class Settings {\n";
    $helper .= "    private static \$cache = [];\n";
    $helper .= "    private static \$loaded = false;\n\n";
    
    $helper .= "    /**\n";
    $helper .= "     * Get setting value\n";
    $helper .= "     */\n";
    $helper .= "    public static function get(\$key, \$default = null) {\n";
    $helper .= "        if (!self::\$loaded) {\n";
    $helper .= "            self::loadSettings();\n";
    $helper .= "        }\n";
    $helper .= "        return array_key_exists(\$key, self::\$cache) ? self::\$cache[\$key] : \$default;\n";
    $helper .= "    }\n\n";
    
    $helper .= "    /**\n";
    $helper .= "     * Set setting value\n";
    $helper .= "     */\n";
    $helper .= "    public static function set(\$key, \$value, \$type = 'string') {\n";
    $helper .= "        try {\n";
    $helper .= "            \$pdo = getDbConnection();\n";
    $helper .= "            \$stmt = \$pdo->prepare(\"\n";
    $helper .= "                INSERT INTO settings (`key`, `value`, `type`, updated_at)\n";
    $helper .= "                VALUES (?, ?, ?, NOW())\n";
    $helper .= "                ON DUPLICATE KEY UPDATE\n";
    $helper .= "                  `value` = VALUES(`value`),\n";
    $helper .= "                  `type`  = VALUES(`type`),\n";
    $helper .= "                  updated_at = NOW()\n";
    $helper .= "            \");\n";
    $helper .= "            \$stmt->execute([\$key, \$value, \$type]);\n";
    $helper .= "            self::\$cache[\$key] = self::castValue(\$value, \$type);\n";
    $helper .= "            return true;\n";
    $helper .= "        } catch (Exception \$e) {\n";
    $helper .= "            logError('Failed to set setting: ' . \$e->getMessage(), ['key' => \$key, 'value' => \$value]);\n";
    $helper .= "            return false;\n";
    $helper .= "        }\n";
    $helper .= "    }\n\n";
    
    $helper .= "    /**\n";
    $helper .= "     * Load all settings from database\n";
    $helper .= "     */\n";
    $helper .= "    private static function loadSettings() {\n";
    $helper .= "        try {\n";
    $helper .= "            \$pdo = getDbConnection();\n";
    $helper .= "            \$stmt = \$pdo->query('SELECT `key`, `value`, `type` FROM settings');\n";
    $helper .= "            \$settings = \$stmt->fetchAll();\n";
    $helper .= "            foreach (\$settings as \$setting) {\n";
    $helper .= "                self::\$cache[\$setting['key']] = self::castValue(\$setting['value'], \$setting['type']);\n";
    $helper .= "            }\n";
    $helper .= "            self::\$loaded = true;\n";
    $helper .= "        } catch (Exception \$e) {\n";
    $helper .= "            logError('Failed to load settings: ' . \$e->getMessage());\n";
    $helper .= "            self::\$loaded = true; // Prevent infinite retry\n";
    $helper .= "        }\n";
    $helper .= "    }\n\n";
    
    $helper .= "    /**\n";
    $helper .= "     * Cast value to appropriate type\n";
    $helper .= "     */\n";
    $helper .= "    private static function castValue(\$value, \$type) {\n";
    $helper .= "        switch (\$type) {\n";
    $helper .= "            case 'boolean': return (bool)\$value;\n";
    $helper .= "            case 'integer': return (int)\$value;\n";
    $helper .= "            case 'json':    return json_decode(\$value, true);\n";
    $helper .= "            case 'array':   return explode(',', (string)\$value);\n";
    $helper .= "            default:        return \$value;\n";
    $helper .= "        }\n";
    $helper .= "    }\n\n";
    
    $helper .= "    public static function getAll() {\n";
    $helper .= "        if (!self::\$loaded) self::loadSettings();\n";
    $helper .= "        return self::\$cache;\n";
    $helper .= "    }\n\n";
    
    $helper .= "    public static function clearCache() {\n";
    $helper .= "        self::\$cache = [];\n";
    $helper .= "        self::\$loaded = false;\n";
    $helper .= "    }\n\n";
    
    $helper .= "    public static function getByCategory(\$category) {\n";
    $helper .= "        try {\n";
    $helper .= "            \$pdo = getDbConnection();\n";
    $helper .= "            \$stmt = \$pdo->prepare('SELECT `key`, `value`, `type` FROM settings WHERE category = ?');\n";
    $helper .= "            \$stmt->execute([\$category]);\n";
    $helper .= "            \$settings = \$stmt->fetchAll();\n";
    $helper .= "            \$result = [];\n";
    $helper .= "            foreach (\$settings as \$setting) {\n";
    $helper .= "                \$result[\$setting['key']] = self::castValue(\$setting['value'], \$setting['type']);\n";
    $helper .= "            }\n";
    $helper .= "            return \$result;\n";
    $helper .= "        } catch (Exception \$e) {\n";
    $helper .= "            logError('Failed to get settings by category: ' . \$e->getMessage(), ['category' => \$category]);\n";
    $helper .= "            return [];\n";
    $helper .= "        }\n";
    $helper .= "    }\n";
    $helper .= "}\n\n";
    
    $helper .= "// Convenience functions\n";
    $helper .= "function getSetting(\$key, \$default = null) { return Settings::get(\$key, \$default); }\n";
    $helper .= "function setSetting(\$key, \$value, \$type = 'string') { return Settings::set(\$key, \$value, \$type); }\n";
    $helper .= "?>";
    
    return $helper;
}

function generateModulesSystem() {
    $system = "<?php\n";
    $system .= "/**\n";
    $system .= " * phpStrapModules System\n";
    $system .= " * Handles module loading and hook execution\n";
    $system .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $system .= " */\n\n";
    
    // Base Module Class
    $system .= "/** Base Module Class */\n";
    $system .= "abstract class BaseModule {\n";
    $system .= "    protected \$name;\n";
    $system .= "    protected \$settings;\n";
    $system .= "    protected \$enabled;\n\n";
    $system .= "    public function __construct(\$name, \$settings = [], \$enabled = false) {\n";
    $system .= "        \$this->name = \$name;\n";
    $system .= "        \$this->settings = \$settings;\n";
    $system .= "        \$this->enabled = \$enabled;\n";
    $system .= "    }\n\n";
    $system .= "    public function init() {}\n";
    $system .= "    protected function getSetting(\$key, \$default = null) { return \$this->settings[\$key] ?? \$default; }\n";
    $system .= "    protected function setSetting(\$key, \$value) {\n";
    $system .= "        \$this->settings[\$key] = \$value;\n";
    $system .= "        return ModuleManager::updateModuleSetting(\$this->name, \$key, \$value);\n";
    $system .= "    }\n";
    $system .= "    public function isEnabled() { return \$this->enabled; }\n";
    $system .= "    public function getName() { return \$this->name; }\n";
    $system .= "}\n\n";
    
    // Module Manager Class
    $system .= "class ModuleManager {\n";
    $system .= "    private static \$modules = [];\n";
    $system .= "    private static \$hooks = [];\n";
    $system .= "    private static \$loaded = false;\n\n";
    
    $system .= "    public static function loadModules() {\n";
    $system .= "        if (self::\$loaded) return;\n";
    $system .= "        try {\n";
    $system .= "            \$pdo = getDbConnection();\n";
    $system .= "            \$stmt = \$pdo->query('SELECT name, title, settings, hooks, enabled FROM modules WHERE enabled = 1 ORDER BY priority ASC');\n";
    $system .= "            \$modules = \$stmt->fetchAll();\n";
    $system .= "            foreach (\$modules as \$module_data) self::loadModule(\$module_data);\n";
    $system .= "            self::\$loaded = true;\n";
    $system .= "        } catch (Exception \$e) { logError('Failed to load modules: ' . \$e->getMessage()); }\n";
    $system .= "    }\n\n";
    
    $system .= "    private static function loadModule(\$module_data) {\n";
    $system .= "        \$name = \$module_data['name'];\n";
    $system .= "        \$module_file = BASE_PATH . '/modules/' . \$name . '/' . \$name . '.php';\n";
    $system .= "        if (!file_exists(\$module_file)) { logError('Module file not found: ' . \$module_file); return false; }\n";
    $system .= "        try {\n";
    $system .= "            require_once \$module_file;\n";
    $system .= "            \$class_name = ucfirst(\$name) . 'Module';\n";
    $system .= "            if (!class_exists(\$class_name)) { logError('Module class not found: ' . \$class_name); return false; }\n";
    $system .= "            \$settings = json_decode(\$module_data['settings'], true) ?: [];\n";
    $system .= "            \$module = new \$class_name(\$name, \$settings, true);\n";
    $system .= "            \$module->init();\n";
    $system .= "            self::\$modules[\$name] = \$module;\n";
    $system .= "            \$hooks = json_decode(\$module_data['hooks'], true) ?: [];\n";
    $system .= "            foreach (\$hooks as \$hook_name => \$hook_methods) {\n";
    $system .= "                self::\$hooks[\$hook_name] = self::\$hooks[\$hook_name] ?? [];\n";
    $system .= "                foreach (\$hook_methods as \$hook_method) {\n";
    $system .= "                    self::\$hooks[\$hook_name][] = [\n";
    $system .= "                        'module' => \$module,\n";
    $system .= "                        'method' => \$hook_method['method'],\n";
    $system .= "                        'priority' => \$hook_method['priority'] ?? 10\n";
    $system .= "                    ];\n";
    $system .= "                }\n";
    $system .= "            }\n";
    $system .= "            foreach (self::\$hooks as \$hook_name => \$hook_list) {\n";
    $system .= "                usort(self::\$hooks[\$hook_name], fn(\$a, \$b) => (\$a['priority'] <=> \$b['priority']));\n";
    $system .= "            }\n";
    $system .= "            return true;\n";
    $system .= "        } catch (Exception \$e) { logError('Failed to load module: ' . \$name . ' - ' . \$e->getMessage()); return false; }\n";
    $system .= "    }\n\n";
    
    $system .= "    public static function executeHook(\$hook_name, \$data = null) {\n";
    $system .= "        if (!self::\$loaded) self::loadModules();\n";
    $system .= "        if (!isset(self::\$hooks[\$hook_name])) return \$data;\n";
    $system .= "        foreach (self::\$hooks[\$hook_name] as \$hook) {\n";
    $system .= "            try {\n";
    $system .= "                \$module = \$hook['module']; \$method = \$hook['method'];\n";
    $system .= "                if (method_exists(\$module, \$method)) \$data = \$module->\$method(\$data);\n";
    $system .= "            } catch (Exception \$e) { logError('Hook execution failed: ' . \$hook_name . ' - ' . \$e->getMessage()); }\n";
    $system .= "        }\n";
    $system .= "        return \$data;\n";
    $system .= "    }\n\n";
    
    $system .= "    public static function getModule(\$name) { return self::\$modules[\$name] ?? null; }\n";
    $system .= "    public static function getModules() { return self::\$modules; }\n\n";
    
    $system .= "    public static function updateModuleSetting(\$module_name, \$key, \$value) {\n";
    $system .= "        try {\n";
    $system .= "            \$pdo = getDbConnection();\n";
    $system .= "            \$stmt = \$pdo->prepare('SELECT settings FROM modules WHERE name = ?');\n";
    $system .= "            \$stmt->execute([\$module_name]);\n";
    $system .= "            \$settings_json = (string)\$stmt->fetchColumn();\n";
    $system .= "            \$settings = json_decode(\$settings_json, true) ?: [];\n";
    $system .= "            \$settings[\$key] = \$value;\n";
    $system .= "            \$stmt = \$pdo->prepare('UPDATE modules SET settings = ? WHERE name = ?');\n";
    $system .= "            return \$stmt->execute([json_encode(\$settings), \$module_name]);\n";
    $system .= "        } catch (Exception \$e) { logError('Failed to update module setting: ' . \$e->getMessage()); return false; }\n";
    $system .= "    }\n";
    $system .= "}\n\n";
    
    $system .= "function executeHook(\$hook_name, \$data = null) { return ModuleManager::executeHook(\$hook_name, \$data); }\n";
    $system .= "?>";
    
    return $system;
}

function generateLanguageFile() {
    $lang = "<?php\n";
    $lang .= "/**\n";
    $lang .= " * phpStrapEnglish Language File\n";
    $lang .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $lang .= " */\n\n";
    
    $lang .= "\$lang = [\n";
    $lang .= "    // Common\n";
    $lang .= "    'yes' => 'Yes',\n";
    $lang .= "    'no' => 'No',\n";
    $lang .= "    'save' => 'Save',\n";
    $lang .= "    'cancel' => 'Cancel',\n";
    $lang .= "    'delete' => 'Delete',\n";
    $lang .= "    'edit' => 'Edit',\n";
    $lang .= "    'create' => 'Create',\n";
    $lang .= "    'update' => 'Update',\n";
    $lang .= "    'submit' => 'Submit',\n";
    $lang .= "    'reset' => 'Reset',\n";
    $lang .= "    'back' => 'Back',\n";
    $lang .= "    'next' => 'Next',\n";
    $lang .= "    'previous' => 'Previous',\n";
    $lang .= "    'continue' => 'Continue',\n";
    $lang .= "    'loading' => 'Loading...',\n";
    $lang .= "    'success' => 'Success',\n";
    $lang .= "    'error' => 'Error',\n";
    $lang .= "    'warning' => 'Warning',\n";
    $lang .= "    'info' => 'Information',\n\n";
    $lang .= "    // Authentication\n";
    $lang .= "    'login' => 'Login',\n";
    $lang .= "    'logout' => 'Logout',\n";
    $lang .= "    'register' => 'Register',\n";
    $lang .= "    'email' => 'Email',\n";
    $lang .= "    'password' => 'Password',\n";
    $lang .= "    'confirm_password' => 'Confirm Password',\n";
    $lang .= "    'forgot_password' => 'Forgot Password?',\n";
    $lang .= "    'reset_password' => 'Reset Password',\n";
    $lang .= "    'remember_me' => 'Remember Me',\n";
    $lang .= "    'login_required' => 'Login required to access this page',\n";
    $lang .= "    'invalid_credentials' => 'Invalid email or password',\n";
    $lang .= "    'account_locked' => 'Account temporarily locked due to failed login attempts',\n";
    $lang .= "    'email_not_verified' => 'Please verify your email address before logging in',\n\n";
    $lang .= "    // User Management\n";
    $lang .= "    'user' => 'User',\n";
    $lang .= "    'users' => 'Users',\n";
    $lang .= "    'profile' => 'Profile',\n";
    $lang .= "    'account' => 'Account',\n";
    $lang .= "    'name' => 'Name',\n";
    $lang .= "    'username' => 'Username',\n";
    $lang .= "    'first_name' => 'First Name',\n";
    $lang .= "    'last_name' => 'Last Name',\n";
    $lang .= "    'phone' => 'Phone',\n";
    $lang .= "    'address' => 'Address',\n";
    $lang .= "    'city' => 'City',\n";
    $lang .= "    'country' => 'Country',\n";
    $lang .= "    'timezone' => 'Timezone',\n";
    $lang .= "    'language' => 'Language',\n\n";
    $lang .= "    // Forms and Validation\n";
    $lang .= "    'required_field' => 'This field is required',\n";
    $lang .= "    'invalid_email' => 'Please enter a valid email address',\n";
    $lang .= "    'password_too_short' => 'Password must be at least 8 characters long',\n";
    $lang .= "    'passwords_do_not_match' => 'Passwords do not match',\n";
    $lang .= "    'invalid_phone' => 'Please enter a valid phone number',\n";
    $lang .= "    'file_too_large' => 'File size exceeds maximum limit',\n";
    $lang .= "    'invalid_file_type' => 'File type not allowed',\n\n";
    $lang .= "    // Dashboard and Navigation\n";
    $lang .= "    'dashboard' => 'Dashboard',\n";
    $lang .= "    'admin_panel' => 'Admin Panel',\n";
    $lang .= "    'settings' => 'Settings',\n";
    $lang .= "    'modules' => 'Modules',\n";
    $lang .= "    'reports' => 'Reports',\n";
    $lang .= "    'statistics' => 'Statistics',\n";
    $lang .= "    'home' => 'Home',\n";
    $lang .= "    'menu' => 'Menu',\n";
    $lang .= "    'navigation' => 'Navigation',\n\n";
    $lang .= "    // Membership and Credits\n";
    $lang .= "    'membership' => 'Membership',\n";
    $lang .= "    'credits' => 'Credits',\n";
    $lang .= "    'balance' => 'Balance',\n";
    $lang .= "    'purchase' => 'Purchase',\n";
    $lang .= "    'transaction' => 'Transaction',\n";
    $lang .= "    'transactions' => 'Transactions',\n";
    $lang .= "    'withdraw' => 'Withdraw',\n";
    $lang .= "    'withdrawal' => 'Withdrawal',\n";
    $lang .= "    'affiliate' => 'Affiliate',\n";
    $lang .= "    'referral' => 'Referral',\n";
    $lang .= "    'commission' => 'Commission',\n\n";
    $lang .= "    // Status Messages\n";
    $lang .= "    'saved_successfully' => 'Settings saved successfully',\n";
    $lang .= "    'updated_successfully' => 'Updated successfully',\n";
    $lang .= "    'deleted_successfully' => 'Deleted successfully',\n";
    $lang .= "    'created_successfully' => 'Created successfully',\n";
    $lang .= "    'operation_failed' => 'Operation failed. Please try again.',\n";
    $lang .= "    'permission_denied' => 'Permission denied',\n";
    $lang .= "    'not_found' => 'Page not found',\n";
    $lang .= "    'server_error' => 'Server error. Please try again later.',\n\n";
    $lang .= "    // Date and Time\n";
    $lang .= "    'date' => 'Date',\n";
    $lang .= "    'time' => 'Time',\n";
    $lang .= "    'created_at' => 'Created At',\n";
    $lang .= "    'updated_at' => 'Updated At',\n";
    $lang .= "    'last_login' => 'Last Login',\n";
    $lang .= "    'expires_at' => 'Expires At',\n\n";
    $lang .= "    // Email Templates\n";
    $lang .= "    'email_verification_subject' => 'Verify Your Email Address',\n";
    $lang .= "    'password_reset_subject' => 'Password Reset Request',\n";
    $lang .= "    'welcome_subject' => 'Welcome to ' . SITE_NAME,\n";
    $lang .= "    'email_footer' => 'This is an automated message from ' . SITE_NAME,\n";
    $lang .= "];\n\n";
    
    $lang .= "function __(\$key, \$default = null) { global \$lang; return \$lang[\$key] ?? (\$default ?: \$key); }\n";
    $lang .= "function sprintf__(\$key, ...\$args) { return sprintf(__(\$key), ...\$args); }\n";
    $lang .= "?>";
    
    return $lang;
}

function generateHtaccess() {
    $htaccess = "# phpStrap .htaccess Configuration\n";
    $htaccess .= "# Generated by installer on " . date('Y-m-d H:i:s') . "\n\n";
    $htaccess .= "RewriteEngine On\n\n";

    // Security headers
    $htaccess .= "<IfModule mod_headers.c>\n";
    $htaccess .= "    Header always set X-Content-Type-Options nosniff\n";
    $htaccess .= "    Header always set X-Frame-Options DENY\n";
    $htaccess .= "    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n";
    $htaccess .= "    Header always set Permissions-Policy \"geolocation=(), microphone=(), camera=()\"\n";
    $htaccess .= "</IfModule>\n\n";

    // Hide sensitive files
    $htaccess .= "<FilesMatch \"\\.(htaccess|htpasswd|ini|log|sql|conf|config)$\">\n";
    $htaccess .= "    Order Allow,Deny\n";
    $htaccess .= "    Deny from all\n";
    $htaccess .= "</FilesMatch>\n\n";

    // Protect sensitive dirs
    $htaccess .= "RewriteRule ^config/ - [F,L]\n";
    $htaccess .= "RewriteRule ^logs/ - [F,L]\n";
    $htaccess .= "RewriteRule ^installer/ - [F,L]\n";
    $htaccess .= "RewriteRule ^uploads/.*\\.php$ - [F,L]\n\n";

    // Router
    $htaccess .= "RewriteCond %{REQUEST_FILENAME} !-f\n";
    $htaccess .= "RewriteCond %{REQUEST_FILENAME} !-d\n";
    $htaccess .= "RewriteRule ^(.*)$ index.php?route=$1 [QSA,L]\n\n";

    // Compression
    $htaccess .= "<IfModule mod_deflate.c>\n";
    $htaccess .= "    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json\n";
    $htaccess .= "</IfModule>\n\n";

    // Cache control
    $htaccess .= "<IfModule mod_expires.c>\n";
    $htaccess .= "    ExpiresActive on\n";
    $htaccess .= "    ExpiresByType text/css \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType application/javascript \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType image/png \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType image/jpg \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType image/jpeg \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType image/gif \"access plus 1 month\"\n";
    $htaccess .= "    ExpiresByType image/svg+xml \"access plus 1 month\"\n";
    $htaccess .= "</IfModule>\n\n";

    // Error pages
    $htaccess .= "ErrorDocument 404 /error.php?code=404\n";
    $htaccess .= "ErrorDocument 403 /error.php?code=403\n";
    $htaccess .= "ErrorDocument 500 /error.php?code=500\n";

    return $htaccess;
}



/**
 * Accepts optional $base_url; if null we infer a clean origin.
 * This avoids leaking filesystem path via SCRIPT_NAME during install.
 */
function generateRobotsTxt($base_url = null) {
    if ($base_url === null && isset($_SESSION['base_url'])) {
        $base_url = $_SESSION['base_url'];
    }
    $origin = rtrim(phpstrap_normalize_origin($base_url ?? phpstrap_public_origin()), '/');

    $robots  = "# robots.txt for phpStrap\n";
    $robots .= "# Generated by installer on " . date('Y-m-d H:i:s') . "\n\n";
    $robots .= "User-agent: *\n";
    $robots .= "Disallow: /config/\n";
    $robots .= "Disallow: /logs/\n";
    $robots .= "Disallow: /cache/\n";
    $robots .= "Disallow: /installer/\n";
    $robots .= "Disallow: /admin/\n";
    $robots .= "Disallow: /api/\n";
    $robots .= "Allow: /\n\n";
    $robots .= "Sitemap: " . $origin . "/sitemap.xml\n";
    return $robots;
}

function generateMaintenancePage() {
    $maintenance = "<?php\n";
    $maintenance .= "/**\n";
    $maintenance .= " * phpStrapMaintenance Page\n";
    $maintenance .= " * Generated by installer on " . date('Y-m-d H:i:s') . "\n";
    $maintenance .= " */\n\n";
    $maintenance .= "if (!defined('MAINTENANCE_MODE') || !MAINTENANCE_MODE) { header('Location: /'); exit; }\n\n";
    $maintenance .= "header('HTTP/1.1 503 Service Temporarily Unavailable');\n";
    $maintenance .= "header('Status: 503 Service Temporarily Unavailable');\n";
    $maintenance .= "header('Retry-After: 3600');\n";
    $maintenance .= "?>\n";
    $maintenance .= "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n";
    $maintenance .= "    <meta charset=\"UTF-8\">\n";
    $maintenance .= "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
    $maintenance .= "    <title>Site Maintenance - " . (defined('SITE_NAME') ? SITE_NAME : 'BootPHP') . "</title>\n";
    $maintenance .= "    <style>\n";
    $maintenance .= "        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; display: flex; align-items: center; justify-content: center; }\n";
    $maintenance .= "        .container { text-align: center; max-width: 600px; padding: 2rem; }\n";
    $maintenance .= "        .icon { font-size: 4rem; margin-bottom: 1rem; }\n";
    $maintenance .= "        h1 { font-size: 2.5rem; margin-bottom: 1rem; }\n";
    $maintenance .= "        p { font-size: 1.2rem; margin-bottom: 2rem; opacity: 0.9; }\n";
    $maintenance .= "        .back-link { display: inline-block; padding: 0.75rem 1.5rem; background: rgba(255,255,255,0.2); border-radius: 0.5rem; text-decoration: none; color: white; transition: background 0.3s ease; }\n";
    $maintenance .= "        .back-link:hover { background: rgba(255,255,255,0.3); }\n";
    $maintenance .= "    </style>\n</head>\n<body>\n";
    $maintenance .= "    <div class=\"container\">\n";
    $maintenance .= "        <div class=\"icon\">ðŸ”§</div>\n";
    $maintenance .= "        <h1>Site Under Maintenance</h1>\n";
    $maintenance .= "        <p><?php echo defined('MAINTENANCE_MESSAGE') ? MAINTENANCE_MESSAGE : 'We are currently performing scheduled maintenance. Please check back soon.'; ?></p>\n";
    $maintenance .= "        <a href=\"#\" onclick=\"location.reload()\" class=\"back-link\">Refresh Page</a>\n";
    $maintenance .= "    </div>\n";
    $maintenance .= "</body>\n</html>";
    return $maintenance;
}

function generateSecuritySalt() {
    return bin2hex(random_bytes(32));
}

/* ------------------------------------------------------------------------- */
/* The old installer helper getBaseUrl() (pathful) is intentionally removed. */
/* Use phpstrap_public_origin() in the installer, and BASE_URL at runtime.   */
/* ------------------------------------------------------------------------- */

?>